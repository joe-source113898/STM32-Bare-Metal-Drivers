
STM32F4_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000da0  08000da0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000da0  08000da0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000da0  08000da0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000da0  08000da0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000da4  08000da4  00010da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000040  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001522  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000497  00000000  00000000  0002159d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a8  00000000  00000000  00021a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000135  00000000  00000000  00021be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000027bb  00000000  00000000  00021d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001d32  00000000  00000000  000244d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a5da  00000000  00000000  00026202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000062c  00000000  00000000  000307dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00030e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d88 	.word	0x08000d88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08000d88 	.word	0x08000d88

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
void SPI2_GPIOInits(void);
void SPI2_Inits(void);
void GPIO_ButtonInit(void);
void delay(void);

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    // Initialize button and SPI
    GPIO_ButtonInit();
 80001dc:	f000 f824 	bl	8000228 <GPIO_ButtonInit>
    SPI2_GPIOInits();
 80001e0:	f000 f842 	bl	8000268 <SPI2_GPIOInits>
    SPI2_Inits();
 80001e4:	f000 f862 	bl	80002ac <SPI2_Inits>

    // Enable the SPI peripheral
    SPI_SSIConfig(SPI2, ENABLE); // Set NSS high internally
 80001e8:	2101      	movs	r1, #1
 80001ea:	480c      	ldr	r0, [pc, #48]	; (800021c <main+0x44>)
 80001ec:	f000 fd8b 	bl	8000d06 <SPI_SSIConfig>
    SPI_PeripheralControl(SPI2, ENABLE);
 80001f0:	2101      	movs	r1, #1
 80001f2:	480a      	ldr	r0, [pc, #40]	; (800021c <main+0x44>)
 80001f4:	f000 fd6b 	bl	8000cce <SPI_PeripheralControl>

    while(1) {
        if (flag) {
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <main+0x48>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0fa      	beq.n	80001f8 <main+0x20>
            flag = 0;  // Clear the flag
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <main+0x48>)
 8000204:	2200      	movs	r2, #0
 8000206:	701a      	strb	r2, [r3, #0]
            SPI_Send(SPI2, (uint8_t*)name, strlen(name));
 8000208:	4806      	ldr	r0, [pc, #24]	; (8000224 <main+0x4c>)
 800020a:	f7ff ffdd 	bl	80001c8 <strlen>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	4904      	ldr	r1, [pc, #16]	; (8000224 <main+0x4c>)
 8000214:	4801      	ldr	r0, [pc, #4]	; (800021c <main+0x44>)
 8000216:	f000 fd12 	bl	8000c3e <SPI_Send>
        if (flag) {
 800021a:	e7ed      	b.n	80001f8 <main+0x20>
 800021c:	40003800 	.word	0x40003800
 8000220:	20000044 	.word	0x20000044
 8000224:	20000000 	.word	0x20000000

08000228 <GPIO_ButtonInit>:
    }

    return 0;
}

void GPIO_ButtonInit(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
    GPIO_Handle_t GPIOBtn;

    // GPIO Button Configuration
    GPIOBtn.pGPIOx = GPIOA;
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <GPIO_ButtonInit+0x3c>)
 8000230:	607b      	str	r3, [r7, #4]
    GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = USER_BUTTON_PIN;
 8000232:	2300      	movs	r3, #0
 8000234:	723b      	strb	r3, [r7, #8]
    GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000236:	2304      	movs	r3, #4
 8000238:	727b      	strb	r3, [r7, #9]
    GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023a:	2302      	movs	r3, #2
 800023c:	72bb      	strb	r3, [r7, #10]
    GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023e:	2300      	movs	r3, #0
 8000240:	72fb      	strb	r3, [r7, #11]

    GPIO_Init(&GPIOBtn);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f9bb 	bl	80005c0 <GPIO_Init>

    // IRQ Configurations
    GPIO_IRQ_ProrityConfig(IRQ_NO_EXTI0, IRQ_PRI_NO_15);
 800024a:	210f      	movs	r1, #15
 800024c:	2006      	movs	r0, #6
 800024e:	f000 fbf9 	bl	8000a44 <GPIO_IRQ_ProrityConfig>
    GPIO_IRQConfig(IRQ_NO_EXTI0, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	2006      	movs	r0, #6
 8000256:	f000 fb6f 	bl	8000938 <GPIO_IRQConfig>
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020000 	.word	0x40020000

08000268 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;

    // SPI2 peripheral
    SPIPins.pGPIOx = GPIOB;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <SPI2_GPIOInits+0x40>)
 8000270:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000272:	2302      	movs	r3, #2
 8000274:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_ALTFN_5;
 8000276:	2305      	movs	r3, #5
 8000278:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800027e:	2301      	movs	r3, #1
 8000280:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]

    // SCLK
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000286:	230d      	movs	r3, #13
 8000288:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f997 	bl	80005c0 <GPIO_Init>

    // MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000292:	230f      	movs	r3, #15
 8000294:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f991 	bl	80005c0 <GPIO_Init>
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020400 	.word	0x40020400

080002ac <SPI2_Inits>:

void SPI2_Inits(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    SPI2Handle.pSPIx = SPI2;
 80002b0:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <SPI2_Inits+0x40>)
 80002b2:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <SPI2_Inits+0x44>)
 80002b4:	601a      	str	r2, [r3, #0]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <SPI2_Inits+0x40>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	715a      	strb	r2, [r3, #5]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <SPI2_Inits+0x40>)
 80002be:	2201      	movs	r2, #1
 80002c0:	711a      	strb	r2, [r3, #4]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // Generating SCLK of 2MHz
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <SPI2_Inits+0x40>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	719a      	strb	r2, [r3, #6]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_16_BITS;
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <SPI2_Inits+0x40>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	71da      	strb	r2, [r3, #7]
    SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <SPI2_Inits+0x40>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	721a      	strb	r2, [r3, #8]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <SPI2_Inits+0x40>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	725a      	strb	r2, [r3, #9]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // Software slave management enabled
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <SPI2_Inits+0x40>)
 80002dc:	2201      	movs	r2, #1
 80002de:	729a      	strb	r2, [r3, #10]

    SPI_Init(&SPI2Handle);
 80002e0:	4802      	ldr	r0, [pc, #8]	; (80002ec <SPI2_Inits+0x40>)
 80002e2:	f000 fc51 	bl	8000b88 <SPI_Init>
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000024 	.word	0x20000024
 80002f0:	40003800 	.word	0x40003800

080002f4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	delay();
 80002f8:	f000 f80a 	bl	8000310 <delay>
    GPIO_IRQHandling(USER_BUTTON_PIN);
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fbcb 	bl	8000a98 <GPIO_IRQHandling>
    flag = 1;
 8000302:	4b02      	ldr	r3, [pc, #8]	; (800030c <EXTI0_IRQHandler+0x18>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000044 	.word	0x20000044

08000310 <delay>:

void delay(void) {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < 500000; i++);
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	e002      	b.n	8000322 <delay+0x12>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3301      	adds	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <delay+0x28>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d9f8      	bls.n	800031c <delay+0xc>
}
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	0007a11f 	.word	0x0007a11f

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 fce9 	bl	8000d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff33 	bl	80001d8 <main>

08000372 <LoopForever>:

LoopForever:
  b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000380:	08000da8 	.word	0x08000da8
  ldr r2, =_sbss
 8000384:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000388:	20000048 	.word	0x20000048

0800038c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <GPIO_PeripClockControl>:

#include "stm32f407xx_gpio_driver.h"
#include <stdio.h>

// Clock control API for GPIOs
void GPIO_PeripClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800039c:	78fb      	ldrb	r3, [r7, #3]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d178      	bne.n	8000494 <GPIO_PeripClockControl+0x104>
		if (pGPIOx == GPIOA) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a7a      	ldr	r2, [pc, #488]	; (8000590 <GPIO_PeripClockControl+0x200>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeripClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 80003aa:	4b7a      	ldr	r3, [pc, #488]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a79      	ldr	r2, [pc, #484]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOK){
			GPIOK_CLOCK_DISABLE();
		}
	}
}
 80003b6:	e0e5      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOB) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a77      	ldr	r2, [pc, #476]	; (8000598 <GPIO_PeripClockControl+0x208>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeripClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 80003c0:	4b74      	ldr	r3, [pc, #464]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a73      	ldr	r2, [pc, #460]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e0da      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOC){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a72      	ldr	r2, [pc, #456]	; (800059c <GPIO_PeripClockControl+0x20c>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeripClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 80003d6:	4b6f      	ldr	r3, [pc, #444]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a6e      	ldr	r2, [pc, #440]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e0cf      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOD){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a6e      	ldr	r2, [pc, #440]	; (80005a0 <GPIO_PeripClockControl+0x210>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeripClockControl+0x6a>
			GPIOD_CLOCK_ENABLE();
 80003ec:	4b69      	ldr	r3, [pc, #420]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a68      	ldr	r2, [pc, #416]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e0c4      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOE){
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a69      	ldr	r2, [pc, #420]	; (80005a4 <GPIO_PeripClockControl+0x214>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeripClockControl+0x80>
			GPIOE_CLOCK_ENABLE();
 8000402:	4b64      	ldr	r3, [pc, #400]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a63      	ldr	r2, [pc, #396]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e0b9      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOF){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a65      	ldr	r2, [pc, #404]	; (80005a8 <GPIO_PeripClockControl+0x218>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeripClockControl+0x96>
			GPIOF_CLOCK_ENABLE();
 8000418:	4b5e      	ldr	r3, [pc, #376]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a5d      	ldr	r2, [pc, #372]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e0ae      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOG){
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a60      	ldr	r2, [pc, #384]	; (80005ac <GPIO_PeripClockControl+0x21c>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeripClockControl+0xac>
			GPIOG_CLOCK_ENABLE();
 800042e:	4b59      	ldr	r3, [pc, #356]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a58      	ldr	r2, [pc, #352]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043a:	e0a3      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOH){
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a5c      	ldr	r2, [pc, #368]	; (80005b0 <GPIO_PeripClockControl+0x220>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeripClockControl+0xc2>
			GPIOH_CLOCK_ENABLE();
 8000444:	4b53      	ldr	r3, [pc, #332]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a52      	ldr	r2, [pc, #328]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800044a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	e098      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOI){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a57      	ldr	r2, [pc, #348]	; (80005b4 <GPIO_PeripClockControl+0x224>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeripClockControl+0xd8>
			GPIOI_CLOCK_ENABLE();
 800045a:	4b4e      	ldr	r3, [pc, #312]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a4d      	ldr	r2, [pc, #308]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000466:	e08d      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a53      	ldr	r2, [pc, #332]	; (80005b8 <GPIO_PeripClockControl+0x228>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeripClockControl+0xee>
			GPIOJ_CLOCK_ENABLE();
 8000470:	4b48      	ldr	r3, [pc, #288]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a47      	ldr	r2, [pc, #284]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e082      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOK){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a4e      	ldr	r2, [pc, #312]	; (80005bc <GPIO_PeripClockControl+0x22c>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d17e      	bne.n	8000584 <GPIO_PeripClockControl+0x1f4>
			GPIOK_CLOCK_ENABLE();
 8000486:	4b43      	ldr	r3, [pc, #268]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a42      	ldr	r2, [pc, #264]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800048c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e077      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		if (pGPIOx == GPIOA) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a3e      	ldr	r2, [pc, #248]	; (8000590 <GPIO_PeripClockControl+0x200>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeripClockControl+0x11a>
			GPIOA_CLOCK_DISABLE();
 800049c:	4b3d      	ldr	r3, [pc, #244]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a3c      	ldr	r2, [pc, #240]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004a2:	f023 0301 	bic.w	r3, r3, #1
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e06c      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOB) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a3a      	ldr	r2, [pc, #232]	; (8000598 <GPIO_PeripClockControl+0x208>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeripClockControl+0x130>
			GPIOB_CLOCK_DISABLE();
 80004b2:	4b38      	ldr	r3, [pc, #224]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a37      	ldr	r2, [pc, #220]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004b8:	f023 0302 	bic.w	r3, r3, #2
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e061      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOC){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a36      	ldr	r2, [pc, #216]	; (800059c <GPIO_PeripClockControl+0x20c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeripClockControl+0x146>
			GPIOC_CLOCK_DISABLE();
 80004c8:	4b32      	ldr	r3, [pc, #200]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a31      	ldr	r2, [pc, #196]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004ce:	f023 0304 	bic.w	r3, r3, #4
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e056      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOD){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <GPIO_PeripClockControl+0x210>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeripClockControl+0x15c>
			GPIOD_CLOCK_DISABLE();
 80004de:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a2c      	ldr	r2, [pc, #176]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004e4:	f023 0308 	bic.w	r3, r3, #8
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ea:	e04b      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOE){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a2d      	ldr	r2, [pc, #180]	; (80005a4 <GPIO_PeripClockControl+0x214>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeripClockControl+0x172>
			GPIOE_CLOCK_DISABLE();
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a26      	ldr	r2, [pc, #152]	; (8000594 <GPIO_PeripClockControl+0x204>)
 80004fa:	f023 0310 	bic.w	r3, r3, #16
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e040      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOF){
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <GPIO_PeripClockControl+0x218>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeripClockControl+0x188>
			GPIOF_CLOCK_DISABLE();
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a21      	ldr	r2, [pc, #132]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000510:	f023 0320 	bic.w	r3, r3, #32
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e035      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOG){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a24      	ldr	r2, [pc, #144]	; (80005ac <GPIO_PeripClockControl+0x21c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeripClockControl+0x19e>
			GPIOG_CLOCK_DISABLE();
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e02a      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOH){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <GPIO_PeripClockControl+0x220>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeripClockControl+0x1b4>
			GPIOH_CLOCK_DISABLE();
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a16      	ldr	r2, [pc, #88]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800053c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e01f      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOI){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <GPIO_PeripClockControl+0x224>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeripClockControl+0x1ca>
			GPIOI_CLOCK_DISABLE();
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a10      	ldr	r2, [pc, #64]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e014      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <GPIO_PeripClockControl+0x228>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeripClockControl+0x1e0>
			GPIOJ_CLOCK_DISABLE();
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <GPIO_PeripClockControl+0x204>)
 8000568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e009      	b.n	8000584 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOK){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <GPIO_PeripClockControl+0x22c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d105      	bne.n	8000584 <GPIO_PeripClockControl+0x1f4>
			GPIOK_CLOCK_DISABLE();
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <GPIO_PeripClockControl+0x204>)
 800057e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40020000 	.word	0x40020000
 8000594:	40023800 	.word	0x40023800
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40021400 	.word	0x40021400
 80005ac:	40021800 	.word	0x40021800
 80005b0:	40021c00 	.word	0x40021c00
 80005b4:	40022000 	.word	0x40022000
 80005b8:	40022400 	.word	0x40022400
 80005bc:	40022800 	.word	0x40022800

080005c0 <GPIO_Init>:

// GPIO Init and Deinit APIs
void GPIO_Init(GPIO_Handle_t* pGPIOHandle) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]

    // Enable the peripheral clock
    GPIO_PeripClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fedc 	bl	8000390 <GPIO_PeripClockControl>

    // Configure the modes of a GPIO pin
    // Configuring non interrupt modes
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOGE) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d820      	bhi.n	8000622 <GPIO_Init+0x62>
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2103      	movs	r1, #3
 8000600:	fa01 f303 	lsl.w	r3, r1, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	400a      	ands	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6819      	ldr	r1, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	430a      	orrs	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	e0e4      	b.n	80007ec <GPIO_Init+0x22c>
    } else {
        // It is interrupt mode
        if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	795b      	ldrb	r3, [r3, #5]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d117      	bne.n	800065a <GPIO_Init+0x9a>
            // Configure the FTSR register
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062a:	4b52      	ldr	r3, [pc, #328]	; (8000774 <GPIO_Init+0x1b4>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	7912      	ldrb	r2, [r2, #4]
 8000632:	4611      	mov	r1, r2
 8000634:	2201      	movs	r2, #1
 8000636:	408a      	lsls	r2, r1
 8000638:	4611      	mov	r1, r2
 800063a:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <GPIO_Init+0x1b4>)
 800063c:	430b      	orrs	r3, r1
 800063e:	60d3      	str	r3, [r2, #12]
            // Clear the RTSR bit
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000640:	4b4c      	ldr	r3, [pc, #304]	; (8000774 <GPIO_Init+0x1b4>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	7912      	ldrb	r2, [r2, #4]
 8000648:	4611      	mov	r1, r2
 800064a:	2201      	movs	r2, #1
 800064c:	408a      	lsls	r2, r1
 800064e:	43d2      	mvns	r2, r2
 8000650:	4611      	mov	r1, r2
 8000652:	4a48      	ldr	r2, [pc, #288]	; (8000774 <GPIO_Init+0x1b4>)
 8000654:	400b      	ands	r3, r1
 8000656:	6093      	str	r3, [r2, #8]
 8000658:	e035      	b.n	80006c6 <GPIO_Init+0x106>
        } else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	795b      	ldrb	r3, [r3, #5]
 800065e:	2b05      	cmp	r3, #5
 8000660:	d117      	bne.n	8000692 <GPIO_Init+0xd2>
            // Configure the RTSR register
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000662:	4b44      	ldr	r3, [pc, #272]	; (8000774 <GPIO_Init+0x1b4>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	7912      	ldrb	r2, [r2, #4]
 800066a:	4611      	mov	r1, r2
 800066c:	2201      	movs	r2, #1
 800066e:	408a      	lsls	r2, r1
 8000670:	4611      	mov	r1, r2
 8000672:	4a40      	ldr	r2, [pc, #256]	; (8000774 <GPIO_Init+0x1b4>)
 8000674:	430b      	orrs	r3, r1
 8000676:	6093      	str	r3, [r2, #8]
            // Clear the FTSR bit
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000678:	4b3e      	ldr	r3, [pc, #248]	; (8000774 <GPIO_Init+0x1b4>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7912      	ldrb	r2, [r2, #4]
 8000680:	4611      	mov	r1, r2
 8000682:	2201      	movs	r2, #1
 8000684:	408a      	lsls	r2, r1
 8000686:	43d2      	mvns	r2, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a3a      	ldr	r2, [pc, #232]	; (8000774 <GPIO_Init+0x1b4>)
 800068c:	400b      	ands	r3, r1
 800068e:	60d3      	str	r3, [r2, #12]
 8000690:	e019      	b.n	80006c6 <GPIO_Init+0x106>
        } else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	795b      	ldrb	r3, [r3, #5]
 8000696:	2b06      	cmp	r3, #6
 8000698:	d115      	bne.n	80006c6 <GPIO_Init+0x106>
            // Configure the RTSR register
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069a:	4b36      	ldr	r3, [pc, #216]	; (8000774 <GPIO_Init+0x1b4>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	7912      	ldrb	r2, [r2, #4]
 80006a2:	4611      	mov	r1, r2
 80006a4:	2201      	movs	r2, #1
 80006a6:	408a      	lsls	r2, r1
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a32      	ldr	r2, [pc, #200]	; (8000774 <GPIO_Init+0x1b4>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	6093      	str	r3, [r2, #8]
            // Configure the FTSR register
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b0:	4b30      	ldr	r3, [pc, #192]	; (8000774 <GPIO_Init+0x1b4>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	7912      	ldrb	r2, [r2, #4]
 80006b8:	4611      	mov	r1, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	408a      	lsls	r2, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <GPIO_Init+0x1b4>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	60d3      	str	r3, [r2, #12]
        }

        // configure the GPIO port selection in syscfg_EXTIcr
        // SYSCFG SYSCFG_EXTICR[x] configures which pin of which port issues interrupt
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	f003 0303 	and.w	r3, r3, #3
 80006d6:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx));
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a26      	ldr	r2, [pc, #152]	; (8000778 <GPIO_Init+0x1b8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d060      	beq.n	80007a4 <GPIO_Init+0x1e4>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a25      	ldr	r2, [pc, #148]	; (800077c <GPIO_Init+0x1bc>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d040      	beq.n	800076e <GPIO_Init+0x1ae>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a23      	ldr	r2, [pc, #140]	; (8000780 <GPIO_Init+0x1c0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d039      	beq.n	800076a <GPIO_Init+0x1aa>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <GPIO_Init+0x1c4>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d032      	beq.n	8000766 <GPIO_Init+0x1a6>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <GPIO_Init+0x1c8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d02b      	beq.n	8000762 <GPIO_Init+0x1a2>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a1f      	ldr	r2, [pc, #124]	; (800078c <GPIO_Init+0x1cc>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d024      	beq.n	800075e <GPIO_Init+0x19e>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <GPIO_Init+0x1d0>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d01d      	beq.n	800075a <GPIO_Init+0x19a>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <GPIO_Init+0x1d4>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d016      	beq.n	8000756 <GPIO_Init+0x196>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1a      	ldr	r2, [pc, #104]	; (8000798 <GPIO_Init+0x1d8>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d00f      	beq.n	8000752 <GPIO_Init+0x192>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a19      	ldr	r2, [pc, #100]	; (800079c <GPIO_Init+0x1dc>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d008      	beq.n	800074e <GPIO_Init+0x18e>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <GPIO_Init+0x1e0>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d101      	bne.n	800074a <GPIO_Init+0x18a>
 8000746:	230a      	movs	r3, #10
 8000748:	e02d      	b.n	80007a6 <GPIO_Init+0x1e6>
 800074a:	2300      	movs	r3, #0
 800074c:	e02b      	b.n	80007a6 <GPIO_Init+0x1e6>
 800074e:	2309      	movs	r3, #9
 8000750:	e029      	b.n	80007a6 <GPIO_Init+0x1e6>
 8000752:	2308      	movs	r3, #8
 8000754:	e027      	b.n	80007a6 <GPIO_Init+0x1e6>
 8000756:	2307      	movs	r3, #7
 8000758:	e025      	b.n	80007a6 <GPIO_Init+0x1e6>
 800075a:	2306      	movs	r3, #6
 800075c:	e023      	b.n	80007a6 <GPIO_Init+0x1e6>
 800075e:	2305      	movs	r3, #5
 8000760:	e021      	b.n	80007a6 <GPIO_Init+0x1e6>
 8000762:	2304      	movs	r3, #4
 8000764:	e01f      	b.n	80007a6 <GPIO_Init+0x1e6>
 8000766:	2303      	movs	r3, #3
 8000768:	e01d      	b.n	80007a6 <GPIO_Init+0x1e6>
 800076a:	2302      	movs	r3, #2
 800076c:	e01b      	b.n	80007a6 <GPIO_Init+0x1e6>
 800076e:	2301      	movs	r3, #1
 8000770:	e019      	b.n	80007a6 <GPIO_Init+0x1e6>
 8000772:	bf00      	nop
 8000774:	40013c00 	.word	0x40013c00
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400
 8000780:	40020800 	.word	0x40020800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40021000 	.word	0x40021000
 800078c:	40021400 	.word	0x40021400
 8000790:	40021800 	.word	0x40021800
 8000794:	40021c00 	.word	0x40021c00
 8000798:	40022000 	.word	0x40022000
 800079c:	40022400 	.word	0x40022400
 80007a0:	40022800 	.word	0x40022800
 80007a4:	2300      	movs	r3, #0
 80007a6:	747b      	strb	r3, [r7, #17]
        // Enabling the clock for SYSCFG before configuring the registers for SYSCFG
        SYSCFG_CLOCK_ENABLE();
 80007a8:	4b60      	ldr	r3, [pc, #384]	; (800092c <GPIO_Init+0x36c>)
 80007aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ac:	4a5f      	ldr	r2, [pc, #380]	; (800092c <GPIO_Init+0x36c>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80007b4:	4a5e      	ldr	r2, [pc, #376]	; (8000930 <GPIO_Init+0x370>)
 80007b6:	7cfb      	ldrb	r3, [r7, #19]
 80007b8:	3302      	adds	r3, #2
 80007ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007be:	7c79      	ldrb	r1, [r7, #17]
 80007c0:	7cbb      	ldrb	r3, [r7, #18]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	4959      	ldr	r1, [pc, #356]	; (8000930 <GPIO_Init+0x370>)
 80007cc:	7cfb      	ldrb	r3, [r7, #19]
 80007ce:	4302      	orrs	r2, r0
 80007d0:	3302      	adds	r3, #2
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable the interrupt delivery in EXTI
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d6:	4b57      	ldr	r3, [pc, #348]	; (8000934 <GPIO_Init+0x374>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	7912      	ldrb	r2, [r2, #4]
 80007de:	4611      	mov	r1, r2
 80007e0:	2201      	movs	r2, #1
 80007e2:	408a      	lsls	r2, r1
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a53      	ldr	r2, [pc, #332]	; (8000934 <GPIO_Init+0x374>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
    }

    temp = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

    // Configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	799b      	ldrb	r3, [r3, #6]
 80007f4:	461a      	mov	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	689a      	ldr	r2, [r3, #8]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2103      	movs	r1, #3
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	400a      	ands	r2, r1
 800081e:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6899      	ldr	r1, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	430a      	orrs	r2, r1
 800082e:	609a      	str	r2, [r3, #8]
    temp = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

    // Configure the pupd control
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	79db      	ldrb	r3, [r3, #7]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68da      	ldr	r2, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2103      	movs	r1, #3
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	400a      	ands	r2, r1
 8000862:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68d9      	ldr	r1, [r3, #12]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	430a      	orrs	r2, r1
 8000872:	60da      	str	r2, [r3, #12]
    temp = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

    // Configure the optype
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7a1b      	ldrb	r3, [r3, #8]
 800087c:	461a      	mov	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	4619      	mov	r1, r3
 8000894:	2301      	movs	r3, #1
 8000896:	408b      	lsls	r3, r1
 8000898:	43db      	mvns	r3, r3
 800089a:	4619      	mov	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	400a      	ands	r2, r1
 80008a2:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6859      	ldr	r1, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	605a      	str	r2, [r3, #4]
    temp = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

    // Configure the alternate functionality
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d131      	bne.n	8000924 <GPIO_Init+0x364>
        // Configure the alternate function registers
        uint8_t temp1, temp2;
        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	7c3a      	ldrb	r2, [r7, #16]
 80008d8:	3208      	adds	r2, #8
 80008da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	220f      	movs	r2, #15
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	7c3a      	ldrb	r2, [r7, #16]
 80008f2:	4001      	ands	r1, r0
 80008f4:	3208      	adds	r2, #8
 80008f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	7c3a      	ldrb	r2, [r7, #16]
 8000900:	3208      	adds	r2, #8
 8000902:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7a5b      	ldrb	r3, [r3, #9]
 800090a:	461a      	mov	r2, r3
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	4618      	mov	r0, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	7c3a      	ldrb	r2, [r7, #16]
 800091c:	4301      	orrs	r1, r0
 800091e:	3208      	adds	r2, #8
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40013800 	.word	0x40013800
 8000934:	40013c00 	.word	0x40013c00

08000938 <GPIO_IRQConfig>:
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx , uint8_t PinNumber) {
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber);
}

// GPIO IRQ configuration and handling
void GPIO_IRQConfig(uint8_t IRQ_Number, uint8_t EnorDi) {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE) {
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d133      	bne.n	80009b6 <GPIO_IRQConfig+0x7e>
		if (IRQ_Number <= 31) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b1f      	cmp	r3, #31
 8000952:	d80a      	bhi.n	800096a <GPIO_IRQConfig+0x32>
			// Configure ISER 0 register
			*NVIC_ISER0 |= ( 1 << IRQ_Number);
 8000954:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <GPIO_IRQConfig+0xf4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	2101      	movs	r1, #1
 800095c:	fa01 f202 	lsl.w	r2, r1, r2
 8000960:	4611      	mov	r1, r2
 8000962:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <GPIO_IRQConfig+0xf4>)
 8000964:	430b      	orrs	r3, r1
 8000966:	6013      	str	r3, [r2, #0]
		} else if (IRQ_Number > 64 && IRQ_Number < 96){
			// Configure ICER 2 register
			*NVIC_ICER2 |= ( 1 << (IRQ_Number % 64));
	 }
  }
}
 8000968:	e059      	b.n	8000a1e <GPIO_IRQConfig+0xe6>
		} else if (IRQ_Number > 31 && IRQ_Number < 64){
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b1f      	cmp	r3, #31
 800096e:	d90f      	bls.n	8000990 <GPIO_IRQConfig+0x58>
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b3f      	cmp	r3, #63	; 0x3f
 8000974:	d80c      	bhi.n	8000990 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= ( 1 << ( IRQ_Number % 32));
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <GPIO_IRQConfig+0xf8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	f002 021f 	and.w	r2, r2, #31
 8000980:	2101      	movs	r1, #1
 8000982:	fa01 f202 	lsl.w	r2, r1, r2
 8000986:	4611      	mov	r1, r2
 8000988:	4a29      	ldr	r2, [pc, #164]	; (8000a30 <GPIO_IRQConfig+0xf8>)
 800098a:	430b      	orrs	r3, r1
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	e046      	b.n	8000a1e <GPIO_IRQConfig+0xe6>
		} else if (IRQ_Number >= 64 && IRQ_Number < 96){
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b3f      	cmp	r3, #63	; 0x3f
 8000994:	d943      	bls.n	8000a1e <GPIO_IRQConfig+0xe6>
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b5f      	cmp	r3, #95	; 0x5f
 800099a:	d840      	bhi.n	8000a1e <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << ( IRQ_Number % 64));
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <GPIO_IRQConfig+0xfc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009a6:	2101      	movs	r1, #1
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	4611      	mov	r1, r2
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <GPIO_IRQConfig+0xfc>)
 80009b0:	430b      	orrs	r3, r1
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	e033      	b.n	8000a1e <GPIO_IRQConfig+0xe6>
		if (IRQ_Number <= 31){
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b1f      	cmp	r3, #31
 80009ba:	d80a      	bhi.n	80009d2 <GPIO_IRQConfig+0x9a>
		*NVIC_ICER0 |= (1 << IRQ_Number);
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <GPIO_IRQConfig+0x100>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	2101      	movs	r1, #1
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	4611      	mov	r1, r2
 80009ca:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <GPIO_IRQConfig+0x100>)
 80009cc:	430b      	orrs	r3, r1
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	e025      	b.n	8000a1e <GPIO_IRQConfig+0xe6>
		} else if (IRQ_Number > 31 && IRQ_Number < 64){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b1f      	cmp	r3, #31
 80009d6:	d90f      	bls.n	80009f8 <GPIO_IRQConfig+0xc0>
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b3f      	cmp	r3, #63	; 0x3f
 80009dc:	d80c      	bhi.n	80009f8 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQ_Number % 32));
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <GPIO_IRQConfig+0x104>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	f002 021f 	and.w	r2, r2, #31
 80009e8:	2101      	movs	r1, #1
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	4611      	mov	r1, r2
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <GPIO_IRQConfig+0x104>)
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e012      	b.n	8000a1e <GPIO_IRQConfig+0xe6>
		} else if (IRQ_Number > 64 && IRQ_Number < 96){
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d90f      	bls.n	8000a1e <GPIO_IRQConfig+0xe6>
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b5f      	cmp	r3, #95	; 0x5f
 8000a02:	d80c      	bhi.n	8000a1e <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQ_Number % 64));
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <GPIO_IRQConfig+0x108>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a0e:	2101      	movs	r1, #1
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <GPIO_IRQConfig+0x108>)
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	e7ff      	b.n	8000a1e <GPIO_IRQConfig+0xe6>
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000e104 	.word	0xe000e104
 8000a34:	e000e108 	.word	0xe000e108
 8000a38:	e000e180 	.word	0xe000e180
 8000a3c:	e000e184 	.word	0xe000e184
 8000a40:	e000e188 	.word	0xe000e188

08000a44 <GPIO_IRQ_ProrityConfig>:

void GPIO_IRQ_ProrityConfig(uint8_t IRQ_Number, uint32_t Interrupt_Prority){
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
	// Find the appropriate IPR register
	uint8_t iprx = IRQ_Number / 4 ;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQ_Number % 4 ;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_ammount = (8 * iprx_section) + NO_PR_BITS_IMPLEMENTED ;
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	3304      	adds	r3, #4
 8000a66:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + iprx) |= (Interrupt_Prority << shift_ammount) ;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a70:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a84:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	//  Clear the EXTI PR register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber)) {
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <GPIO_IRQHandling+0x3c>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <GPIO_IRQHandling+0x30>

		// printf("Inside IRS handler \n") ;
		// printf("Pin # %d \n " , PinNumber) ;

		// Clear the PR register and clear the interrupt
		EXTI->PR |= (1 << PinNumber) ;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <GPIO_IRQHandling+0x3c>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	2101      	movs	r1, #1
 8000abc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <GPIO_IRQHandling+0x3c>)
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6153      	str	r3, [r2, #20]
	}
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40013c00 	.word	0x40013c00

08000ad8 <SPI_PeripheralClockControl>:
 */

#include "stm32f407xx_spi_driver.h"

// SPI peripheral clock control
void SPI_PeripheralClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d120      	bne.n	8000b2c <SPI_PeripheralClockControl+0x54>
        if (pSPIx == SPI1) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <SPI_PeripheralClockControl+0xa0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <SPI_PeripheralClockControl+0x28>
            SPI1_CLOCK_ENABLE();
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
            SPI2_CLOCK_DISABLE();
        } else if (pSPIx == SPI3) {
            SPI3_CLOCK_DISABLE();
        }
    }
}
 8000afe:	e035      	b.n	8000b6c <SPI_PeripheralClockControl+0x94>
        } else if (pSPIx == SPI2) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <SPI_PeripheralClockControl+0xa8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <SPI_PeripheralClockControl+0x3e>
            SPI2_CLOCK_ENABLE();
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b14:	e02a      	b.n	8000b6c <SPI_PeripheralClockControl+0x94>
        } else if (pSPIx == SPI3) {
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <SPI_PeripheralClockControl+0xac>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d126      	bne.n	8000b6c <SPI_PeripheralClockControl+0x94>
            SPI3_CLOCK_ENABLE();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2a:	e01f      	b.n	8000b6c <SPI_PeripheralClockControl+0x94>
        if (pSPIx == SPI1) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <SPI_PeripheralClockControl+0xa0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d106      	bne.n	8000b42 <SPI_PeripheralClockControl+0x6a>
            SPI1_CLOCK_DISABLE();
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b3e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b40:	e014      	b.n	8000b6c <SPI_PeripheralClockControl+0x94>
        } else if (pSPIx == SPI2) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <SPI_PeripheralClockControl+0xa8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <SPI_PeripheralClockControl+0x80>
            SPI2_CLOCK_DISABLE();
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b56:	e009      	b.n	8000b6c <SPI_PeripheralClockControl+0x94>
        } else if (pSPIx == SPI3) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SPI_PeripheralClockControl+0xac>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d105      	bne.n	8000b6c <SPI_PeripheralClockControl+0x94>
            SPI3_CLOCK_DISABLE();
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SPI_PeripheralClockControl+0xa4>)
 8000b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40013000 	.word	0x40013000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40003800 	.word	0x40003800
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <SPI_Init>:

// Init and deinit APIs
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    // Enable the clock
    SPI_PeripheralClockControl(pSPIHandle->pSPIx, ENABLE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff9e 	bl	8000ad8 <SPI_PeripheralClockControl>

    // First configure the SPI_CR1 register
    uint32_t tempreg = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]

    // Configure the SPI device mode
    tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]

    // Configure the bus config
    if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	795b      	ldrb	r3, [r3, #5]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d104      	bne.n	8000bc0 <SPI_Init+0x38>
        // BIDIMODE should be cleared
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e014      	b.n	8000bea <SPI_Init+0x62>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d104      	bne.n	8000bd2 <SPI_Init+0x4a>
        // BIDIMODE should be set
        tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e00b      	b.n	8000bea <SPI_Init+0x62>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	795b      	ldrb	r3, [r3, #5]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d107      	bne.n	8000bea <SPI_Init+0x62>
        // BIDIMODE should be cleared
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000be0:	60fb      	str	r3, [r7, #12]

        // RXONLY bit should be set
        tempreg |= (1 << SPI_CR1_RXONLY);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be8:	60fb      	str	r3, [r7, #12]
    }

    // Configure SPI clock speed
    tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	799b      	ldrb	r3, [r3, #6]
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]

    // Configure SPI DFF mode
    tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	79db      	ldrb	r3, [r3, #7]
 8000bfc:	02db      	lsls	r3, r3, #11
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]

    // Configure SPI CPOL
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7a1b      	ldrb	r3, [r3, #8]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]

    // Configure SPI CPHA
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7a5b      	ldrb	r3, [r3, #9]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    // Configure SPI SSM
    tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7a9b      	ldrb	r3, [r3, #10]
 8000c24:	025b      	lsls	r3, r3, #9
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]

    pSPIHandle->pSPIx->CR1 = tempreg;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <SPI_Send>:
        SPI3_REG_RESET();
    }
}

// SPI send and receive APIs
void SPI_Send(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t length) {
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
    while (length > 0) {
 8000c4a:	e024      	b.n	8000c96 <SPI_Send+0x58>
        // Check for TX buffer empty state
        while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000c4c:	bf00      	nop
 8000c4e:	2102      	movs	r1, #2
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f828 	bl	8000ca6 <SPI_GetFlagStatus>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f8      	beq.n	8000c4e <SPI_Send+0x10>

        if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00b      	beq.n	8000c80 <SPI_Send+0x42>
            // 16-bit data format
            // Load 16-bit data into DR
            pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	60da      	str	r2, [r3, #12]
            length -= 2;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3b02      	subs	r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
            pTxBuffer += 2;
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	e00a      	b.n	8000c96 <SPI_Send+0x58>
        } else {
            // Load 8-bit data into DR
            pSPIx->DR = *pTxBuffer;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	60da      	str	r2, [r3, #12]
            length--;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
    while (length > 0) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1d7      	bne.n	8000c4c <SPI_Send+0xe>
        }
    }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SPI_GetFlagStatus>:
        }
    }
}

// SPI get flag status
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SPI_PeripheralControl>:

// SPI peripheral enable
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE) {
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d106      	bne.n	8000cee <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8000cec:	e005      	b.n	8000cfa <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	601a      	str	r2, [r3, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SPI_SSIConfig>:

// SPI SSI configuration
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE) {
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d106      	bne.n	8000d26 <SPI_SSIConfig+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
    }
}
 8000d24:	e005      	b.n	8000d32 <SPI_SSIConfig+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <__libc_init_array>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	4d0d      	ldr	r5, [pc, #52]	; (8000d78 <__libc_init_array+0x38>)
 8000d44:	4c0d      	ldr	r4, [pc, #52]	; (8000d7c <__libc_init_array+0x3c>)
 8000d46:	1b64      	subs	r4, r4, r5
 8000d48:	10a4      	asrs	r4, r4, #2
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	42a6      	cmp	r6, r4
 8000d4e:	d109      	bne.n	8000d64 <__libc_init_array+0x24>
 8000d50:	4d0b      	ldr	r5, [pc, #44]	; (8000d80 <__libc_init_array+0x40>)
 8000d52:	4c0c      	ldr	r4, [pc, #48]	; (8000d84 <__libc_init_array+0x44>)
 8000d54:	f000 f818 	bl	8000d88 <_init>
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	10a4      	asrs	r4, r4, #2
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	42a6      	cmp	r6, r4
 8000d60:	d105      	bne.n	8000d6e <__libc_init_array+0x2e>
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d68:	4798      	blx	r3
 8000d6a:	3601      	adds	r6, #1
 8000d6c:	e7ee      	b.n	8000d4c <__libc_init_array+0xc>
 8000d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d72:	4798      	blx	r3
 8000d74:	3601      	adds	r6, #1
 8000d76:	e7f2      	b.n	8000d5e <__libc_init_array+0x1e>
 8000d78:	08000da0 	.word	0x08000da0
 8000d7c:	08000da0 	.word	0x08000da0
 8000d80:	08000da0 	.word	0x08000da0
 8000d84:	08000da4 	.word	0x08000da4

08000d88 <_init>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr

08000d94 <_fini>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	bf00      	nop
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr
